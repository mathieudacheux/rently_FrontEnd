// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from 'redux-query'
import * as runtime from '../runtime'
import {
  PropertyTypeSerializerRead,
  PropertyTypeSerializerReadFromJSON,
  PropertyTypeSerializerReadToJSON,
} from '../models'

export interface PropertyTypesGetPropertyTypeByIdRequest {
  id: number
}

/**
 * Return a list of property types
 */
function propertyTypesGetAllPropertyTypesRaw<T>(
  requestConfig: runtime.TypedQueryConfig<
    T,
    Array<PropertyTypeSerializerRead>
  > = {},
): QueryConfig<T> {
  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/property_types`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(PropertyTypeSerializerReadFromJSON), text)
  }

  return config
}

/**
 * Return a list of property types
 */
export function propertyTypesGetAllPropertyTypes<T>(
  requestConfig?: runtime.TypedQueryConfig<
    T,
    Array<PropertyTypeSerializerRead>
  >,
): QueryConfig<T> {
  return propertyTypesGetAllPropertyTypesRaw(requestConfig)
}

/**
 * Return a property type by his id
 */
function propertyTypesGetPropertyTypeByIdRaw<T>(
  requestParameters: PropertyTypesGetPropertyTypeByIdRequest,
  requestConfig: runtime.TypedQueryConfig<T, PropertyTypeSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling propertyTypesGetPropertyTypeById.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/property_types/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(PropertyTypeSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Return a property type by his id
 */
export function propertyTypesGetPropertyTypeById<T>(
  requestParameters: PropertyTypesGetPropertyTypeByIdRequest,
  requestConfig?: runtime.TypedQueryConfig<T, PropertyTypeSerializerRead>,
): QueryConfig<T> {
  return propertyTypesGetPropertyTypeByIdRaw(requestParameters, requestConfig)
}
