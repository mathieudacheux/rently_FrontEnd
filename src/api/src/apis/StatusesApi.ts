// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from 'redux-query'
import * as runtime from '../runtime'
import {
  StatusSerializerPost,
  StatusSerializerPostFromJSON,
  StatusSerializerPostToJSON,
  StatusSerializerPut,
  StatusSerializerPutFromJSON,
  StatusSerializerPutToJSON,
  StatusSerializerRead,
  StatusSerializerReadFromJSON,
  StatusSerializerReadToJSON,
} from '../models'

export interface StatusesCreateStatusRequest {
  statusSerializerPost: StatusSerializerPost
}

export interface StatusesDeleteStatusRequest {
  id: number
}

export interface StatusesGetStatusByIdRequest {
  id: number
}

export interface StatusesUpdateStatusRequest {
  id: number
  statusSerializerPut?: StatusSerializerPut
}

/**
 * Create a new status
 */
function statusesCreateStatusRaw<T>(
  requestParameters: StatusesCreateStatusRequest,
  requestConfig: runtime.TypedQueryConfig<T, StatusSerializerRead> = {},
): QueryConfig<T> {
  if (
    requestParameters.statusSerializerPost === null ||
    requestParameters.statusSerializerPost === undefined
  ) {
    throw new runtime.RequiredError(
      'statusSerializerPost',
      'Required parameter requestParameters.statusSerializerPost was null or undefined when calling statusesCreateStatus.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/statuses`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      StatusSerializerPostToJSON(requestParameters.statusSerializerPost),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(StatusSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Create a new status
 */
export function statusesCreateStatus<T>(
  requestParameters: StatusesCreateStatusRequest,
  requestConfig?: runtime.TypedQueryConfig<T, StatusSerializerRead>,
): QueryConfig<T> {
  return statusesCreateStatusRaw(requestParameters, requestConfig)
}

/**
 * Delete a status by its id
 */
function statusesDeleteStatusRaw<T>(
  requestParameters: StatusesDeleteStatusRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling statusesDeleteStatus.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/statuses/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'DELETE',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 * Delete a status by its id
 */
export function statusesDeleteStatus<T>(
  requestParameters: StatusesDeleteStatusRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return statusesDeleteStatusRaw(requestParameters, requestConfig)
}

/**
 * Return a list of all statuses
 */
function statusesGetAllStatusRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<StatusSerializerRead>> = {},
): QueryConfig<T> {
  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/statuses`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(StatusSerializerReadFromJSON), text)
  }

  return config
}

/**
 * Return a list of all statuses
 */
export function statusesGetAllStatus<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<StatusSerializerRead>>,
): QueryConfig<T> {
  return statusesGetAllStatusRaw(requestConfig)
}

/**
 * Return a status by his id
 */
function statusesGetStatusByIdRaw<T>(
  requestParameters: StatusesGetStatusByIdRequest,
  requestConfig: runtime.TypedQueryConfig<T, StatusSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling statusesGetStatusById.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/statuses/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(StatusSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Return a status by his id
 */
export function statusesGetStatusById<T>(
  requestParameters: StatusesGetStatusByIdRequest,
  requestConfig?: runtime.TypedQueryConfig<T, StatusSerializerRead>,
): QueryConfig<T> {
  return statusesGetStatusByIdRaw(requestParameters, requestConfig)
}

/**
 * Update a status by its id
 */
function statusesUpdateStatusRaw<T>(
  requestParameters: StatusesUpdateStatusRequest,
  requestConfig: runtime.TypedQueryConfig<T, StatusSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling statusesUpdateStatus.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/statuses/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'PUT',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      StatusSerializerPutToJSON(requestParameters.statusSerializerPut),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(StatusSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Update a status by its id
 */
export function statusesUpdateStatus<T>(
  requestParameters: StatusesUpdateStatusRequest,
  requestConfig?: runtime.TypedQueryConfig<T, StatusSerializerRead>,
): QueryConfig<T> {
  return statusesUpdateStatusRaw(requestParameters, requestConfig)
}
