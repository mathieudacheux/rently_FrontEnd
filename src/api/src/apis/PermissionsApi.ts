// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    PermissionSerializerPost,
    PermissionSerializerPostFromJSON,
    PermissionSerializerPostToJSON,
    PermissionSerializerPut,
    PermissionSerializerPutFromJSON,
    PermissionSerializerPutToJSON,
    PermissionSerializerRead,
    PermissionSerializerReadFromJSON,
    PermissionSerializerReadToJSON,
} from '../models';

export interface PermissionsCreatePermissionRequest {
    permissionSerializerPost: PermissionSerializerPost;
}

export interface PermissionsDeletePermissionRequest {
    id: number;
}

export interface PermissionsGetPermissionByIdRequest {
    id: number;
}

export interface PermissionsUpdatePermissionRequest {
    id: number;
    permissionSerializerPut?: PermissionSerializerPut;
}


/**
 * Create a new permission
 */
function permissionsCreatePermissionRaw<T>(requestParameters: PermissionsCreatePermissionRequest, requestConfig: runtime.TypedQueryConfig<T, PermissionSerializerRead> = {}): QueryConfig<T> {
    if (requestParameters.permissionSerializerPost === null || requestParameters.permissionSerializerPost === undefined) {
        throw new runtime.RequiredError('permissionSerializerPost','Required parameter requestParameters.permissionSerializerPost was null or undefined when calling permissionsCreatePermission.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/permissions`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || PermissionSerializerPostToJSON(requestParameters.permissionSerializerPost),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PermissionSerializerReadFromJSON(body), text);
    }

    return config;
}

/**
* Create a new permission
*/
export function permissionsCreatePermission<T>(requestParameters: PermissionsCreatePermissionRequest, requestConfig?: runtime.TypedQueryConfig<T, PermissionSerializerRead>): QueryConfig<T> {
    return permissionsCreatePermissionRaw(requestParameters, requestConfig);
}

/**
 * Delete a permission by its id
 */
function permissionsDeletePermissionRaw<T>(requestParameters: PermissionsDeletePermissionRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling permissionsDeletePermission.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/permissions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Delete a permission by its id
*/
export function permissionsDeletePermission<T>(requestParameters: PermissionsDeletePermissionRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return permissionsDeletePermissionRaw(requestParameters, requestConfig);
}

/**
 * Return a list of all permissions
 */
function permissionsGetAllPermissionsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<PermissionSerializerRead>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/permissions`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PermissionSerializerReadFromJSON), text);
    }

    return config;
}

/**
* Return a list of all permissions
*/
export function permissionsGetAllPermissions<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<PermissionSerializerRead>>): QueryConfig<T> {
    return permissionsGetAllPermissionsRaw( requestConfig);
}

/**
 * Return a permission by his id
 */
function permissionsGetPermissionByIdRaw<T>(requestParameters: PermissionsGetPermissionByIdRequest, requestConfig: runtime.TypedQueryConfig<T, PermissionSerializerRead> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling permissionsGetPermissionById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/permissions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PermissionSerializerReadFromJSON(body), text);
    }

    return config;
}

/**
* Return a permission by his id
*/
export function permissionsGetPermissionById<T>(requestParameters: PermissionsGetPermissionByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, PermissionSerializerRead>): QueryConfig<T> {
    return permissionsGetPermissionByIdRaw(requestParameters, requestConfig);
}

/**
 * Update a permission by its id
 */
function permissionsUpdatePermissionRaw<T>(requestParameters: PermissionsUpdatePermissionRequest, requestConfig: runtime.TypedQueryConfig<T, PermissionSerializerRead> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling permissionsUpdatePermission.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/permissions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || PermissionSerializerPutToJSON(requestParameters.permissionSerializerPut),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PermissionSerializerReadFromJSON(body), text);
    }

    return config;
}

/**
* Update a permission by its id
*/
export function permissionsUpdatePermission<T>(requestParameters: PermissionsUpdatePermissionRequest, requestConfig?: runtime.TypedQueryConfig<T, PermissionSerializerRead>): QueryConfig<T> {
    return permissionsUpdatePermissionRaw(requestParameters, requestConfig);
}

