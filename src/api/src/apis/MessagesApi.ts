// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from 'redux-query'
import * as runtime from '../runtime'
import {
  MessageSerializerPost,
  MessageSerializerPostFromJSON,
  MessageSerializerPostToJSON,
  MessageSerializerPut,
  MessageSerializerPutFromJSON,
  MessageSerializerPutToJSON,
  MessageSerializerRead,
  MessageSerializerReadFromJSON,
  MessageSerializerReadToJSON,
} from '../models'

export interface MessagesCreateMessageRequest {
  messageSerializerPost: MessageSerializerPost
}

export interface MessagesDeleteMessageRequest {
  id: number
}

export interface MessagesGetMessageByIdRequest {
  id: number
}

export interface MessagesUpdateMessageRequest {
  id: number
  messageSerializerPut?: MessageSerializerPut
}

/**
 * Create a new message
 */
function messagesCreateMessageRaw<T>(
  requestParameters: MessagesCreateMessageRequest,
  requestConfig: runtime.TypedQueryConfig<T, MessageSerializerRead> = {},
): QueryConfig<T> {
  if (
    requestParameters.messageSerializerPost === null ||
    requestParameters.messageSerializerPost === undefined
  ) {
    throw new runtime.RequiredError(
      'messageSerializerPost',
      'Required parameter requestParameters.messageSerializerPost was null or undefined when calling messagesCreateMessage.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/messages`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      MessageSerializerPostToJSON(requestParameters.messageSerializerPost),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(MessageSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Create a new message
 */
export function messagesCreateMessage<T>(
  requestParameters: MessagesCreateMessageRequest,
  requestConfig?: runtime.TypedQueryConfig<T, MessageSerializerRead>,
): QueryConfig<T> {
  return messagesCreateMessageRaw(requestParameters, requestConfig)
}

/**
 * Delete a message by its id
 */
function messagesDeleteMessageRaw<T>(
  requestParameters: MessagesDeleteMessageRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling messagesDeleteMessage.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/messages/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'DELETE',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 * Delete a message by its id
 */
export function messagesDeleteMessage<T>(
  requestParameters: MessagesDeleteMessageRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return messagesDeleteMessageRaw(requestParameters, requestConfig)
}

/**
 * Return a list of all messages
 */
function messagesGetAllMessagesRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<MessageSerializerRead>> = {},
): QueryConfig<T> {
  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/messages`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(MessageSerializerReadFromJSON), text)
  }

  return config
}

/**
 * Return a list of all messages
 */
export function messagesGetAllMessages<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<MessageSerializerRead>>,
): QueryConfig<T> {
  return messagesGetAllMessagesRaw(requestConfig)
}

/**
 * Return a message by his id
 */
function messagesGetMessageByIdRaw<T>(
  requestParameters: MessagesGetMessageByIdRequest,
  requestConfig: runtime.TypedQueryConfig<T, MessageSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling messagesGetMessageById.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/messages/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(MessageSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Return a message by his id
 */
export function messagesGetMessageById<T>(
  requestParameters: MessagesGetMessageByIdRequest,
  requestConfig?: runtime.TypedQueryConfig<T, MessageSerializerRead>,
): QueryConfig<T> {
  return messagesGetMessageByIdRaw(requestParameters, requestConfig)
}

/**
 * Update a message by its id
 */
function messagesUpdateMessageRaw<T>(
  requestParameters: MessagesUpdateMessageRequest,
  requestConfig: runtime.TypedQueryConfig<T, MessageSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling messagesUpdateMessage.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/messages/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'PUT',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      MessageSerializerPutToJSON(requestParameters.messageSerializerPut),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(MessageSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Update a message by its id
 */
export function messagesUpdateMessage<T>(
  requestParameters: MessagesUpdateMessageRequest,
  requestConfig?: runtime.TypedQueryConfig<T, MessageSerializerRead>,
): QueryConfig<T> {
  return messagesUpdateMessageRaw(requestParameters, requestConfig)
}
