// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from 'redux-query'
import * as runtime from '../runtime'
import {
  RoleSerializerPost,
  RoleSerializerPostFromJSON,
  RoleSerializerPostToJSON,
  RoleSerializerPut,
  RoleSerializerPutFromJSON,
  RoleSerializerPutToJSON,
  RoleSerializerRead,
  RoleSerializerReadFromJSON,
  RoleSerializerReadToJSON,
} from '../models'

export interface RolesCreateRoleRequest {
  roleSerializerPost: RoleSerializerPost
}

export interface RolesDeleteRoleRequest {
  id: number
}

export interface RolesGetRoleByIdRequest {
  id: number
}

export interface RolesUpdateRoleRequest {
  id: number
  roleSerializerPut?: RoleSerializerPut
}

/**
 * Create a new role
 */
function rolesCreateRoleRaw<T>(
  requestParameters: RolesCreateRoleRequest,
  requestConfig: runtime.TypedQueryConfig<T, RoleSerializerRead> = {},
): QueryConfig<T> {
  if (
    requestParameters.roleSerializerPost === null ||
    requestParameters.roleSerializerPost === undefined
  ) {
    throw new runtime.RequiredError(
      'roleSerializerPost',
      'Required parameter requestParameters.roleSerializerPost was null or undefined when calling rolesCreateRole.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/roles`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      RoleSerializerPostToJSON(requestParameters.roleSerializerPost),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(RoleSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Create a new role
 */
export function rolesCreateRole<T>(
  requestParameters: RolesCreateRoleRequest,
  requestConfig?: runtime.TypedQueryConfig<T, RoleSerializerRead>,
): QueryConfig<T> {
  return rolesCreateRoleRaw(requestParameters, requestConfig)
}

/**
 * Delete a role by its id
 */
function rolesDeleteRoleRaw<T>(
  requestParameters: RolesDeleteRoleRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling rolesDeleteRole.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/roles/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'DELETE',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 * Delete a role by its id
 */
export function rolesDeleteRole<T>(
  requestParameters: RolesDeleteRoleRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return rolesDeleteRoleRaw(requestParameters, requestConfig)
}

/**
 * Return a list of all roles
 */
function rolesGetAllRolesRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<object>> = {},
): QueryConfig<T> {
  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/roles`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 * Return a list of all roles
 */
export function rolesGetAllRoles<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<object>>,
): QueryConfig<T> {
  return rolesGetAllRolesRaw(requestConfig)
}

/**
 * Return a role by his id
 */
function rolesGetRoleByIdRaw<T>(
  requestParameters: RolesGetRoleByIdRequest,
  requestConfig: runtime.TypedQueryConfig<T, RoleSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling rolesGetRoleById.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/roles/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(RoleSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Return a role by his id
 */
export function rolesGetRoleById<T>(
  requestParameters: RolesGetRoleByIdRequest,
  requestConfig?: runtime.TypedQueryConfig<T, RoleSerializerRead>,
): QueryConfig<T> {
  return rolesGetRoleByIdRaw(requestParameters, requestConfig)
}

/**
 * Update a role by its id
 */
function rolesUpdateRoleRaw<T>(
  requestParameters: RolesUpdateRoleRequest,
  requestConfig: runtime.TypedQueryConfig<T, RoleSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling rolesUpdateRole.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/roles/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'PUT',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      RoleSerializerPutToJSON(requestParameters.roleSerializerPut),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(RoleSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Update a role by its id
 */
export function rolesUpdateRole<T>(
  requestParameters: RolesUpdateRoleRequest,
  requestConfig?: runtime.TypedQueryConfig<T, RoleSerializerRead>,
): QueryConfig<T> {
  return rolesUpdateRoleRaw(requestParameters, requestConfig)
}
