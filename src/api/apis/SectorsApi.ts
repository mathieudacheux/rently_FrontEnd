// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { QueryConfig, ResponseBody } from 'redux-query'
import {
  SectorSerializerPost,
  SectorSerializerPostToJSON,
  SectorSerializerPut,
  SectorSerializerPutToJSON,
  SectorSerializerRead,
  SectorSerializerReadFromJSON,
} from '../models'
import * as runtime from '../runtime'

export interface SectorsCreateSectorRequest {
  sectorSerializerPost: SectorSerializerPost
}

export interface SectorsDeleteSectorRequest {
  id: number
}

export interface SectorsGetSectorByIdRequest {
  id: number
}

export interface SectorsUpdateSectorRequest {
  id: number
  sectorSerializerPut?: SectorSerializerPut
}

/**
 * Create a new sector
 */
function sectorsCreateSectorRaw<T>(
  requestParameters: SectorsCreateSectorRequest,
  requestConfig: runtime.TypedQueryConfig<T, SectorSerializerRead> = {},
): QueryConfig<T> {
  if (
    requestParameters.sectorSerializerPost === null ||
    requestParameters.sectorSerializerPost === undefined
  ) {
    throw new runtime.RequiredError(
      'sectorSerializerPost',
      'Required parameter requestParameters.sectorSerializerPost was null or undefined when calling sectorsCreateSector.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/sectors`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      SectorSerializerPostToJSON(requestParameters.sectorSerializerPost),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(SectorSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Create a new sector
 */
export function sectorsCreateSector<T>(
  requestParameters: SectorsCreateSectorRequest,
  requestConfig?: runtime.TypedQueryConfig<T, SectorSerializerRead>,
): QueryConfig<T> {
  return sectorsCreateSectorRaw(requestParameters, requestConfig)
}

/**
 * Delete a sector by its id
 */
function sectorsDeleteSectorRaw<T>(
  requestParameters: SectorsDeleteSectorRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling sectorsDeleteSector.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/sectors/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'DELETE',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 * Delete a sector by its id
 */
export function sectorsDeleteSector<T>(
  requestParameters: SectorsDeleteSectorRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return sectorsDeleteSectorRaw(requestParameters, requestConfig)
}

/**
 * Return a list of all sectors
 */
function sectorsGetAllAgenciesRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<SectorSerializerRead>> = {},
): QueryConfig<T> {
  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/sectors`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(SectorSerializerReadFromJSON), text)
  }

  return config
}

/**
 * Return a list of all sectors
 */
export function sectorsGetAllAgencies<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<SectorSerializerRead>>,
): QueryConfig<T> {
  return sectorsGetAllAgenciesRaw(requestConfig)
}

/**
 * Return a sector by his id
 */
function sectorsGetSectorByIdRaw<T>(
  requestParameters: SectorsGetSectorByIdRequest,
  requestConfig: runtime.TypedQueryConfig<T, SectorSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling sectorsGetSectorById.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/sectors/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(SectorSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Return a sector by his id
 */
export function sectorsGetSectorById<T>(
  requestParameters: SectorsGetSectorByIdRequest,
  requestConfig?: runtime.TypedQueryConfig<T, SectorSerializerRead>,
): QueryConfig<T> {
  return sectorsGetSectorByIdRaw(requestParameters, requestConfig)
}

/**
 * Update a sector by its id
 */
function sectorsUpdateSectorRaw<T>(
  requestParameters: SectorsUpdateSectorRequest,
  requestConfig: runtime.TypedQueryConfig<T, SectorSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling sectorsUpdateSector.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/sectors/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'PUT',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      SectorSerializerPutToJSON(requestParameters.sectorSerializerPut),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(SectorSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Update a sector by its id
 */
export function sectorsUpdateSector<T>(
  requestParameters: SectorsUpdateSectorRequest,
  requestConfig?: runtime.TypedQueryConfig<T, SectorSerializerRead>,
): QueryConfig<T> {
  return sectorsUpdateSectorRaw(requestParameters, requestConfig)
}
