// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { QueryConfig, ResponseBody } from 'redux-query'
import * as runtime from '../runtime'
import {
  FeeSerializerPut,
  FeeSerializerPutToJSON,
  FeeSerializerRead,
  FeeSerializerReadFromJSON,
} from '../models'

export interface FeesCreateFeeRequest {
  feeSerializerPut: FeeSerializerPut
}

export interface FeesDeleteFeeRequest {
  id: number
}

export interface FeesGetFeeByIdRequest {
  id: number
}

export interface FeesUpdateFeeRequest {
  id: number
  feeSerializerPut: FeeSerializerPut
}

/**
 * Create a new fee
 */
function feesCreateFeeRaw<T>(
  requestParameters: FeesCreateFeeRequest,
  requestConfig: runtime.TypedQueryConfig<T, FeeSerializerRead> = {},
): QueryConfig<T> {
  if (
    requestParameters.feeSerializerPut === null ||
    requestParameters.feeSerializerPut === undefined
  ) {
    throw new runtime.RequiredError(
      'feeSerializerPut',
      'Required parameter requestParameters.feeSerializerPut was null or undefined when calling feesCreateFee.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/fees`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      FeeSerializerPutToJSON(requestParameters.feeSerializerPut),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(FeeSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Create a new fee
 */
export function feesCreateFee<T>(
  requestParameters: FeesCreateFeeRequest,
  requestConfig?: runtime.TypedQueryConfig<T, FeeSerializerRead>,
): QueryConfig<T> {
  return feesCreateFeeRaw(requestParameters, requestConfig)
}

/**
 * Delete a fee by its id
 */
function feesDeleteFeeRaw<T>(
  requestParameters: FeesDeleteFeeRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling feesDeleteFee.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/fees/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'DELETE',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 * Delete a fee by its id
 */
export function feesDeleteFee<T>(
  requestParameters: FeesDeleteFeeRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return feesDeleteFeeRaw(requestParameters, requestConfig)
}

/**
 * Return a list of all fees
 */
function feesGetAllFeesRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<FeeSerializerRead>> = {},
): QueryConfig<T> {
  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/fees`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(FeeSerializerReadFromJSON), text)
  }

  return config
}

/**
 * Return a list of all fees
 */
export function feesGetAllFees<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<FeeSerializerRead>>,
): QueryConfig<T> {
  return feesGetAllFeesRaw(requestConfig)
}

/**
 * Return a fee by his id
 */
function feesGetFeeByIdRaw<T>(
  requestParameters: FeesGetFeeByIdRequest,
  requestConfig: runtime.TypedQueryConfig<T, FeeSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling feesGetFeeById.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/fees/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(FeeSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Return a fee by his id
 */
export function feesGetFeeById<T>(
  requestParameters: FeesGetFeeByIdRequest,
  requestConfig?: runtime.TypedQueryConfig<T, FeeSerializerRead>,
): QueryConfig<T> {
  return feesGetFeeByIdRaw(requestParameters, requestConfig)
}

/**
 * Update a fee by its id
 */
function feesUpdateFeeRaw<T>(
  requestParameters: FeesUpdateFeeRequest,
  requestConfig: runtime.TypedQueryConfig<T, FeeSerializerRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling feesUpdateFee.',
    )
  }

  if (
    requestParameters.feeSerializerPut === null ||
    requestParameters.feeSerializerPut === undefined
  ) {
    throw new runtime.RequiredError(
      'feeSerializerPut',
      'Required parameter requestParameters.feeSerializerPut was null or undefined when calling feesUpdateFee.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/fees/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'PUT',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      FeeSerializerPutToJSON(requestParameters.feeSerializerPut),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(FeeSerializerReadFromJSON(body), text)
  }

  return config
}

/**
 * Update a fee by its id
 */
export function feesUpdateFee<T>(
  requestParameters: FeesUpdateFeeRequest,
  requestConfig?: runtime.TypedQueryConfig<T, FeeSerializerRead>,
): QueryConfig<T> {
  return feesUpdateFeeRaw(requestParameters, requestConfig)
}
