// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from 'redux-query'
import * as runtime from '../runtime'
import {
  CountryModelCreation,
  CountryModelCreationFromJSON,
  CountryModelCreationToJSON,
  CountryModelRead,
  CountryModelReadFromJSON,
  CountryModelReadToJSON,
} from '../models'

export interface CountriesCreateCountryRequest {
  countryModelCreation: CountryModelCreation
}

export interface CountriesDeleteCountryRequest {
  id: number
}

export interface CountriesGetAllCountriesRequest {
  name?: string
}

export interface CountriesGetCountryByIdRequest {
  id: number
}

export interface CountriesUpdateCountryRequest {
  id: number
  body?: object
}

/**
 * Create a new country
 */
function countriesCreateCountryRaw<T>(
  requestParameters: CountriesCreateCountryRequest,
  requestConfig: runtime.TypedQueryConfig<T, CountryModelRead> = {},
): QueryConfig<T> {
  if (
    requestParameters.countryModelCreation === null ||
    requestParameters.countryModelCreation === undefined
  ) {
    throw new runtime.RequiredError(
      'countryModelCreation',
      'Required parameter requestParameters.countryModelCreation was null or undefined when calling countriesCreateCountry.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/countries`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body:
      queryParameters ||
      CountryModelCreationToJSON(requestParameters.countryModelCreation),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(CountryModelReadFromJSON(body), text)
  }

  return config
}

/**
 * Create a new country
 */
export function countriesCreateCountry<T>(
  requestParameters: CountriesCreateCountryRequest,
  requestConfig?: runtime.TypedQueryConfig<T, CountryModelRead>,
): QueryConfig<T> {
  return countriesCreateCountryRaw(requestParameters, requestConfig)
}

/**
 * Delete a country by its id
 */
function countriesDeleteCountryRaw<T>(
  requestParameters: CountriesDeleteCountryRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling countriesDeleteCountry.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/countries/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'DELETE',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 * Delete a country by its id
 */
export function countriesDeleteCountry<T>(
  requestParameters: CountriesDeleteCountryRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return countriesDeleteCountryRaw(requestParameters, requestConfig)
}

/**
 * Return a list of all countries
 */
function countriesGetAllCountriesRaw<T>(
  requestParameters: CountriesGetAllCountriesRequest,
  requestConfig: runtime.TypedQueryConfig<T, Array<CountryModelRead>> = {},
): QueryConfig<T> {
  let queryParameters = null

  queryParameters = {}

  if (requestParameters.name !== undefined) {
    queryParameters['name'] = requestParameters.name
  }

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/countries`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(CountryModelReadFromJSON), text)
  }

  return config
}

/**
 * Return a list of all countries
 */
export function countriesGetAllCountries<T>(
  requestParameters: CountriesGetAllCountriesRequest,
  requestConfig?: runtime.TypedQueryConfig<T, Array<CountryModelRead>>,
): QueryConfig<T> {
  return countriesGetAllCountriesRaw(requestParameters, requestConfig)
}

/**
 * Return a country by his id
 */
function countriesGetCountryByIdRaw<T>(
  requestParameters: CountriesGetCountryByIdRequest,
  requestConfig: runtime.TypedQueryConfig<T, CountryModelRead> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling countriesGetCountryById.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/countries/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(CountryModelReadFromJSON(body), text)
  }

  return config
}

/**
 * Return a country by his id
 */
export function countriesGetCountryById<T>(
  requestParameters: CountriesGetCountryByIdRequest,
  requestConfig?: runtime.TypedQueryConfig<T, CountryModelRead>,
): QueryConfig<T> {
  return countriesGetCountryByIdRaw(requestParameters, requestConfig)
}

/**
 * Update a country by its id
 */
function countriesUpdateCountryRaw<T>(
  requestParameters: CountriesUpdateCountryRequest,
  requestConfig: runtime.TypedQueryConfig<T, object> = {},
): QueryConfig<T> {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling countriesUpdateCountry.',
    )
  }

  let queryParameters = null

  const headerParameters: runtime.HttpHeaders = {}

  headerParameters['Content-Type'] = 'application/json'

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/countries/{id}`.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters.id)),
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'PUT',
      headers: headerParameters,
    },
    body: queryParameters || (requestParameters.body as any),
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 * Update a country by its id
 */
export function countriesUpdateCountry<T>(
  requestParameters: CountriesUpdateCountryRequest,
  requestConfig?: runtime.TypedQueryConfig<T, object>,
): QueryConfig<T> {
  return countriesUpdateCountryRaw(requestParameters, requestConfig)
}
