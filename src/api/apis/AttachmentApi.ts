// tslint:disable
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { QueryConfig } from 'redux-query'
import * as runtime from '../runtime'

export interface AttachmentUploadFileImgRequest {
  folder: string
  id: number
  file?: Blob
}

export interface AttachmentUploadFilePdfRequest {
  folder: string
  id: number
  file?: Blob
}

/**
 */
function attachmentUploadFileImgRaw<T>(
  requestParameters: AttachmentUploadFileImgRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (
    requestParameters.folder === null ||
    requestParameters.folder === undefined
  ) {
    throw new runtime.RequiredError(
      'folder',
      'Required parameter requestParameters.folder was null or undefined when calling attachmentUploadFileImg.',
    )
  }

  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling attachmentUploadFileImg.',
    )
  }

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const formData = new FormData()
  if (requestParameters.file !== undefined) {
    formData.append('file', requestParameters.file as any)
  }

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/file/img/{folder}/{id}`
      .replace(
        `{${'folder'}}`,
        encodeURIComponent(String(requestParameters.folder)),
      )
      .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body: formData,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 */
export function attachmentUploadFileImg<T>(
  requestParameters: AttachmentUploadFileImgRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return attachmentUploadFileImgRaw(requestParameters, requestConfig)
}

/**
 */
function attachmentUploadFilePdfRaw<T>(
  requestParameters: AttachmentUploadFilePdfRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {},
): QueryConfig<T> {
  if (
    requestParameters.folder === null ||
    requestParameters.folder === undefined
  ) {
    throw new runtime.RequiredError(
      'folder',
      'Required parameter requestParameters.folder was null or undefined when calling attachmentUploadFilePdf.',
    )
  }

  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new runtime.RequiredError(
      'id',
      'Required parameter requestParameters.id was null or undefined when calling attachmentUploadFilePdf.',
    )
  }

  const headerParameters: runtime.HttpHeaders = {}

  const { meta = {} } = requestConfig

  meta.authType = ['bearer']
  const formData = new FormData()
  if (requestParameters.file !== undefined) {
    formData.append('file', requestParameters.file as any)
  }

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/file/pdf/{folder}/{id}`
      .replace(
        `{${'folder'}}`,
        encodeURIComponent(String(requestParameters.folder)),
      )
      .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body: formData,
  }

  const { transform: requestTransform } = requestConfig
  if (requestTransform) {
  }

  return config
}

/**
 */
export function attachmentUploadFilePdf<T>(
  requestParameters: AttachmentUploadFilePdfRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>,
): QueryConfig<T> {
  return attachmentUploadFilePdfRaw(requestParameters, requestConfig)
}
